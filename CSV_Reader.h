/**********************************************************************
[[外部ファイルヘッダー(CSV_Reader.h)]] Version 0.0.5
	作者：奥田　真規

	CSV_Reade.cppに関するヘッダー
***********************************************************************/
#pragma once

#include <Windows.h>
/*==========================================================================
CSV_Reader マクロ管理
==========================================================================*/

//---------------------------------------------------------------------
//	_ARRAYマクロ
//		CSVから書き出されたファイルは1次元配列のため、マクロで
//		2次元配列に似せています!
//
//		_ARRAY(a,b,c)	は a->Array[b][c]と同義です
//		※aは　CSV_FILE* 型である必要があります。
//---------------------------------------------------------------------
#define _ARRAY(a,b,c)		(a->Array[b * (a->Column_Size) + c])


//---------------------------------------------------------------------
//	_ARRAYSTRマクロ
//		上記_ARRAYマクロのtxt読み込み版
//
//		 _ARRAYSTR(a,b,c)はaシートb行にある0列のc文字目を出力します
//		※aは　CSV_FILE* 型である必要があります。
//---------------------------------------------------------------------
#define _ARRAYSTR(a,b,c)	(a->Array[b * (a->Column_Size)]._str[c])


//---------------------------------------------------------------------
//	CreateCSVFromFileフラグ指定マクロ
//		関数CreateCSVFromFileではオプションを引数flagで指定する
//		2つ以上オプションする場合はor演算子で組み合わせる(|)
//		※一部マクロは組み合わせ不可
//
//		NO_CSV_OPTION			:オプション指定なし。デフォルト動作
//									他全てのﾏｸﾛと組み合わせ不可
//
//		CSV_OPTION_SHOWERR		:エラー時にメッセージボックス
//		CSV_OPTION_SHOWTIME		:処理時間をマイクロ秒でメッセージボックス
//		CSV_OPTION_SHOWALL		:メッセージボックス系全てを出力する
//
//---------------------------------------------------------------------

#define NO_CSV_OPTION			(0)

#define CSV_OPTION_SHOWERR		(0x1)
#define CSV_OPTION_SHOWTIME		(0x2)

#define CSV_OPTION_SHOWALL		(CSV_OPTION_SHOWERR|CSV_OPTION_SHOWTIME)



//---------------------------------------------------------------------
//	SAFE_RELEASEマクロ
//		CreateCSVFromFileで作成したCSV_FILE *型のセルシートを開放する
//		マクロ。　ついでにポインタをヌルにします。
//
//		SAFE_RELEASE(x) はNULLの場合,開放関数を実行しません(nullptrの為)
//		※xはCSV_FILE* 型である必要があります。
//---------------------------------------------------------------------
#define SAFE_RELEASE(x)			{ if(x) { (x)->Release(); (x) = NULL; } }

/*==========================================================================
CSV_Reader 構造体,列挙体、共用体宣言
==========================================================================*/

//---------------------------------------------------------------------
//	セルタイプ列挙型
//		関数CreateCSVFromFileではchar型配列でこの列挙型を指定する
//
//		CSV_INT		:整数型データ
//		CSV_FLOAT	:実数型データ
//		CSV_STRING	:文字列データ
//---------------------------------------------------------------------
enum CSVREAD_TYPE {
	CSV_INT		= 'd',	
	CSV_FLOAT	= 'f',
	CSV_STRING	= 's'
};

//---------------------------------------------------------------------
//	読み取りセル範囲指定構造体
//		関数CreateCSVFromFileでは本構造体を用いて読み取り範囲を指定する
//
//		int Column_Start;	: 読み取る前に読み飛ばす列数
//		int Line_Start;		: 読み取る前に読み飛ばす行数
//
//		int Column_Count;	: 読み取る列の大きさ
//							0指定の場合、引数ReadTypeArrayで判断しますが、
//							文字列の最後に\0必須です
//
//		int Line_Count;		: 読み取る行の大きさ
//							0指定の場合、一番下の行まで自動的に読み込み
//							ますが、高負荷です。
//---------------------------------------------------------------------
typedef struct CSV_CELRANGE {
	int Column_Start;	
	int Line_Start;		
	int Column_Count;	
	int Line_Count;		
}CSV_CELRANGE;

//---------------------------------------------------------------------
//	セルデータ共用体
//		実質的なセルのデータ
//		※ この値は変更してはいけません！！※
//
//		int		_int;	: 整数型データ
//		float	_float;	: 実数型データ
//		char *	_str	: 文字列データ（先頭ポインタ）
//---------------------------------------------------------------------
union CEL_DATA {
	int		_int;	
	float	_float;	
	char *	_str;
};

//---------------------------------------------------------------------
//	シートデータ構造体
//		CreateCSVFromFile関数から作られる構造体
//
//	※※※※※※※ この変数はRelease()でメモリを解放してください！
//
//		CEL_DATA		*Array;			: セルの先頭データ(配列)
//		CSVREAD_TYPE	*TypeArray;		: タイプの列タイプ(配列)
//		char			*StringTop;		: 文字列群（ポインタ配列）
//		int			Column_Size;		: 列サイズ
//		int			Line_Size;			: 行サイズ
//
// ----メンバ関数 
//		void Release();		:セルデータを開放する
//							(実行はSAFE_RELEASEを推奨します)
//							※ 関数実行後のアドレスにアクセスは禁止です
//		
//		CEL_DATA Sum(int Column);	
//							:指定した列の合計値を返す(文字列型では使用不可)
//
//		CEL_DATA Average(int Column);
//							:指定した列の平均値を返す(文字列型では使用不可)
//
//		CEL_DATA Min(int Column);
//							:指定した列の最小値を返す(文字列型では使用不可)
//
//		CEL_DATA Max(int Column);
//							:指定した列の最小値を返す(文字列型では使用不可)
//---------------------------------------------------------------------
typedef struct CSV_FILE {
	CEL_DATA		*Array;
	CSVREAD_TYPE	*TypeArray;
	char			*StringTop;
	 int			Column_Size;	
	 int			Line_Size;		

//------ 以下、メンバ関数 ------//

	void Release();
	CEL_DATA Sum(int Column);
	CEL_DATA Average(int Column);
	CEL_DATA Min(int Column);
	CEL_DATA Max(int Column);

}CSV_FILE;



/*==========================================================================
CSV_Reader プロトタイプ宣言
==========================================================================*/
/*=====================================================================
＊＊CSV作成関数＊＊
戻り値 : HRESULT : エラーメッセの出力
引数　 :
	IN	const char		*filename		:ファイル名
	IN  char			*ReadTypeArray	:読み込むフォーマットを配列にしたやつ
	IN  CSV_CELRANGE	CSV_CelRange	:CSVファイル基準での読み込む場所を構造体で指定
	OUT CSV_FILE		**Csv			:読み込みが終了したエクセルデータ(失敗したらアドレスがNULL)
	IN  DWORD			flag			:[必須引数ではない]flag	(デフォルト=0)
=====================================================================*/
HRESULT CreateCSVFromFile(const char *filename, char *ReadTypeArray, CSV_CELRANGE CSV_CelRange, CSV_FILE **Csv, DWORD flag = 0x0);
